<?xml version="1.0" encoding="utf-16"?>
<CLAS CLSNAME="ZCL_FM_DATASET" VERSION="1" LANGU="E" DESCRIPT="Class that represent a single file (dataset) in application" UUID="4BBCA26F6C190093E10080008D7A026F" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BRPAGOTIFA" CREATEDON="20100407" CHANGEDBY="BCUSER" CHANGEDON="20101016" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="701" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 ">
 <implementing CLSNAME="ZCL_FM_DATASET" REFCLSNAME="ZIF_FM_FILE" VERSION="1" EXPOSURE="2" STATE="1" AUTHOR="BCUSER" CREATEDON="20101016" CHANGEDON="00000000" RELTYPE="1"/>
 <implementing CLSNAME="ZCL_FM_DATASET" REFCLSNAME="ZIF_FM_FILE_CONSTANTS" VERSION="1" EXPOSURE="2" STATE="1" AUTHOR="BCUSER" CREATEDON="20101016" CHANGEDON="00000000" RELTYPE="1"/>
 <implementing CLSNAME="ZCL_FM_DATASET" REFCLSNAME="ZIF_FM_FILE_TYPES" VERSION="1" EXPOSURE="2" STATE="1" AUTHOR="BCUSER" CREATEDON="20101016" CHANGEDON="00000000" RELTYPE="1"/>
 <publicSection>class ZCL_FM_DATASET definition
  public
  final
  create public .

*&quot;* public components of class ZCL_FM_DATASET
*&quot;* do not include other source files here!!!
public section.

  interfaces ZIF_FM_FILE .
  interfaces ZIF_FM_FILE_CONSTANTS .
  interfaces ZIF_FM_FILE_TYPES .

  methods CONSTRUCTOR
    importing
      value(IM_FILE_NAME) type STRING .</publicSection>
 <protectedSection>*&quot;* protected components of class ZCL_FM_DATASET
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
 <privateSection>*&quot;* private components of class ZCL_FM_DATASET
*&quot;* do not include other source files here!!!
private section.</privateSection>
 <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
 <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
 <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
 <interfaceMethod CLSNAME="ZCL_FM_DATASET" CPDNAME="ZIF_FM_FILE~APPEND_ROW">
  <source>METHOD zif_fm_file~append_row.
  APPEND im_file_row TO me-&gt;zif_fm_file~ci_i_data.
ENDMETHOD.</source>
 </interfaceMethod>
 <interfaceMethod CLSNAME="ZCL_FM_DATASET" CPDNAME="ZIF_FM_FILE~FILE_EXIST">
  <source>METHOD zif_fm_file~file_exist.
  OPEN DATASET zif_fm_file~ci_v_file_name FOR INPUT IN TEXT MODE ENCODING DEFAULT.

  IF sy-subrc IS NOT INITIAL.
    re_exist = abap_false.
  ELSE.
    CLOSE DATASET zif_fm_file~ci_v_file_name.
    re_exist = abap_true.
  ENDIF.

ENDMETHOD.</source>
 </interfaceMethod>
 <interfaceMethod CLSNAME="ZCL_FM_DATASET" CPDNAME="ZIF_FM_FILE~OPEN">
  <source>METHOD zif_fm_file~open.

* Local Data
  DATA: l_wa_row LIKE LINE OF me-&gt;zif_fm_file~ci_i_data.

* Exceptions
  DATA: l_r_exception TYPE REF TO cx_root.

  TRY .
      OPEN DATASET me-&gt;zif_fm_file~ci_v_file_name FOR INPUT IN TEXT MODE ENCODING DEFAULT.

    CATCH cx_sy_file_open INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_file_open
        EXPORTING
*          textid =
          previous = l_r_exception
          filename = me-&gt;zif_fm_file~ci_v_file_name
*          errorcode =
*          errortext =
          .

    CATCH cx_sy_codepage_converter_init INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_codepage_converter_init
    EXPORTING
*      textid =
      previous = l_r_exception
*      source_codepage =
*      target_codepage =
*      replacement =
          .

    CATCH cx_sy_conversion_codepage INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_conversion_codepage
    EXPORTING
*      textid =
      previous = l_r_exception
          .

    CATCH cx_sy_file_authority INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_file_authority
  EXPORTING
*    textid =
    previous = l_r_exception
*    filename =
          .

    CATCH cx_sy_pipes_not_supported INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_pipes_not_supported
  EXPORTING
*    textid =
    previous = l_r_exception
          .

    CATCH cx_sy_too_many_files INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_too_many_files
        EXPORTING
*    textid =
          previous = l_r_exception
          .
  ENDTRY.

  DO .
    READ DATASET me-&gt;zif_fm_file~ci_v_file_name  INTO l_wa_row.
    IF sy-subrc IS INITIAL.
      IF l_wa_row IS INITIAL.
        EXIT.
      ELSE.
        APPEND l_wa_row TO me-&gt;zif_fm_file~ci_i_data.
      ENDIF.
    ELSE.
       &quot;raise exception
    endif.
    ENDDO.

    TRY .
        CLOSE DATASET me-&gt;zif_fm_file~ci_v_file_name.

      CATCH cx_sy_file_close INTO l_r_exception.
        RAISE EXCEPTION TYPE cx_sy_file_close
          EXPORTING
*          textid =
            previous = l_r_exception
*          filename =
*          errorcode =
*          errortext =
            .

    ENDTRY.

  ENDMETHOD.</source>
 </interfaceMethod>
 <interfaceMethod CLSNAME="ZCL_FM_DATASET" CPDNAME="ZIF_FM_FILE~SAVE">
  <source>METHOD zif_fm_file~save.

* Local Data
  DATA: l_wa_row LIKE LINE OF me-&gt;zif_fm_file~ci_i_data.

* Exceptions
  DATA: l_r_exception TYPE REF TO cx_root.

  TRY .
      OPEN DATASET me-&gt;zif_fm_file~ci_v_file_name FOR OUTPUT ENCODING DEFAULT IN TEXT MODE.

    CATCH cx_sy_file_open INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_file_open
        EXPORTING
*          textid =
*          previous =
          filename = me-&gt;zif_fm_file~ci_v_file_name
*          errorcode =
*          errortext =
          .

    CATCH cx_sy_codepage_converter_init INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_codepage_converter_init
        EXPORTING
*            textid =
          previous = l_r_exception
*            source_codepage =
*            target_codepage =
*            replacement =
          .

    CATCH cx_sy_conversion_codepage INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_conversion_codepage
        EXPORTING
*          textid =
          previous = l_r_exception
          .

    CATCH cx_sy_file_authority INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_file_authority
        EXPORTING
*          textid =
          previous = l_r_exception
*          filename =
          .

    CATCH cx_sy_pipes_not_supported INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_pipes_not_supported
        EXPORTING
*          textid =
          previous = l_r_exception
          .

    CATCH cx_sy_too_many_files INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_too_many_files
        EXPORTING
*          textid =
          previous = l_r_exception
          .
  ENDTRY.

  LOOP AT me-&gt;zif_fm_file~ci_i_data INTO l_wa_row.
    TRY .
        TRANSFER l_wa_row TO me-&gt;zif_fm_file~ci_v_file_name.

      CATCH cx_sy_codepage_converter_init INTO l_r_exception.
        RAISE EXCEPTION TYPE cx_sy_codepage_converter_init
          EXPORTING
*            textid =
            previous = l_r_exception
*            source_codepage =
*            target_codepage =
*            replacement =
            .

      CATCH cx_sy_conversion_codepage INTO l_r_exception.
        RAISE EXCEPTION TYPE cx_sy_conversion_codepage
          EXPORTING
*            textid =
            previous = l_r_exception
            .

      CATCH cx_sy_file_authority INTO l_r_exception.
        RAISE EXCEPTION TYPE cx_sy_file_authority
          EXPORTING
*            textid =
            previous = l_r_exception
*            filename =
            .

      CATCH cx_sy_file_io INTO l_r_exception.
        RAISE EXCEPTION TYPE cx_sy_file_io
          EXPORTING
*            textid =
            previous = l_r_exception
*            filename =
*            errorcode =
*            errortext =
            .

      CATCH cx_sy_file_open INTO l_r_exception.
        RAISE EXCEPTION TYPE cx_sy_file_open
          EXPORTING
*            textid =
            previous = l_r_exception
*            filename =
*            errorcode =
*            errortext =
            .

      CATCH cx_sy_file_open_mode INTO l_r_exception.
        RAISE EXCEPTION TYPE cx_sy_file_open_mode
          EXPORTING
*            textid =
            previous = l_r_exception
*            filename =
            .

      CATCH cx_sy_too_many_files INTO l_r_exception.
        RAISE EXCEPTION TYPE cx_sy_too_many_files
          EXPORTING
*            textid =
            previous = l_r_exception
            .

    ENDTRY.

  ENDLOOP.

  TRY.
      CLOSE DATASET me-&gt;zif_fm_file~ci_v_file_name.

    CATCH cx_sy_file_close INTO l_r_exception.
      RAISE EXCEPTION TYPE cx_sy_file_close
        EXPORTING
*          textid =
          previous = l_r_exception
*          filename =
*          errorcode =
*          errortext =
          .

  ENDTRY.
ENDMETHOD.</source>
 </interfaceMethod>
 <method CLSNAME="ZCL_FM_DATASET" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="BCUSER" CREATEDON="20101012" CHANGEDBY="BCUSER" CHANGEDON="20101016" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="701" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_FM_DATASET" CMPNAME="CONSTRUCTOR" SCONAME="IM_FILE_NAME" VERSION="1" LANGU="E" DESCRIPT="File Name (Full path)" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="BCUSER" CREATEDON="20101012" CHANGEDBY="BCUSER" CHANGEDON="20101016" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <source>METHOD constructor.
  me-&gt;zif_fm_file~ci_v_file_name = im_file_name.
ENDMETHOD.</source>
 </method>
</CLAS>
